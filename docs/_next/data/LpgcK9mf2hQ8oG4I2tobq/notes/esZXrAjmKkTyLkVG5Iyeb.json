{"pageProps":{"note":{"id":"esZXrAjmKkTyLkVG5Iyeb","title":"Git","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"change-past-commit-author":{"type":"header","text":"Change past commit author","value":"change-past-commit-author","line":8,"column":0,"depth":2},"interactive-rebase":{"type":"header","text":"Interactive rebase","value":"interactive-rebase","line":10,"column":0,"depth":3},"replace":{"type":"header","text":"Replace","value":"replace","line":42,"column":0,"depth":3}},"fname":"git","updated":1641744531441,"created":1641739397629,"parent":null,"children":[],"data":{},"contentHash":"190a55f10dee6f1e58596f38f71a3f6b","custom":{"nav_order":1}},"body":"<h1 id=\"git\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#git\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Git</h1>\n<h2 id=\"change-past-commit-author\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#change-past-commit-author\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Change past commit author</h2>\n<h3 id=\"interactive-rebase\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#interactive-rebase\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Interactive rebase</h3>\n<p>Interactive rebase off of a point earlier in the history than the commit you need to modify (<code>git rebase -i &#x3C;earliercommit></code>). In the list of commits being rebased, change the text from <code>pick</code> to <code>edit</code> next to the hash of the one you want to modify. Then when git prompts you to change the commit, use this:</p>\n<pre><code>git commit --amend --author=\"Author Name &#x3C;email@address.com>\" --no-edit\n</code></pre>\n<p>For example, if your commit history is <code>A-B-C-D-E-F</code> with <code>F</code> as <code>HEAD</code>, and you want to change the author of <code>C</code> and <code>D</code>, then you would...</p>\n<ol>\n<li>Specify <code>git rebase -i B</code> (<a href=\"https://help.github.com/articles/about-git-rebase/#an-example-of-using-git-rebase\">here is an example of what you will see after executing the <code>git rebase -i B</code> command</a>)</li>\n</ol>\n<ul>\n<li>if you need to edit <code>A</code>, use <code>git rebase -i --root</code></li>\n</ul>\n<ol start=\"2\">\n<li>Change the lines for both <code>C</code> and <code>D</code> from <code>pick</code> to <code>edit</code></li>\n<li>Exit the editor (for vim, this would be pressing Esc and then typing <code>:wq</code>).</li>\n<li>Once the rebase started, it would first pause at <code>C</code></li>\n<li>You would <code>git commit --amend --author=\"Author Name &#x3C;email@address.com>\"</code></li>\n<li>Then <code>git rebase --continue</code></li>\n<li>It would pause again at <code>D</code></li>\n<li>Then you would <code>git commit --amend --author=\"Author Name &#x3C;email@address.com>\"</code> again</li>\n<li><code>git rebase --continue</code></li>\n<li>The rebase would complete.</li>\n<li>Use <code>git push -f</code> to update your origin with the updated commits.</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit</span>\n<span class=\"token function\">git</span> log <span class=\"token comment\"># To find the commit hash - 1</span>\n<span class=\"token function\">git</span> rebase -i <span class=\"token operator\">&#x3C;</span>hash<span class=\"token operator\">></span>\n<span class=\"token comment\"># change pick to edit</span>\n<span class=\"token function\">git</span> commit --amend --author<span class=\"token operator\">=</span><span class=\"token string\">\"Jonathan Scherrer &#x3C;jonathan.s.scherrer@gmail.com>\"</span>\n<span class=\"token function\">git</span> rebase --continue\n<span class=\"token function\">git</span> push -f\n</code></pre>\n<h3 id=\"replace\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#replace\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Replace</h3>\n<p>The <a href=\"https://stackoverflow.com/a/3042512/3357935\">accepted answer</a> to this question is a wonderfully clever use of interactive rebase, but it unfortunately exhibits conflicts if the commit we are trying to change the author of used to be on a branch which was subsequently merged in. More generally, it does not work when handling messy histories.</p>\n<p>Since I am apprehensive about running scripts which depend on setting and unsetting environment variables to rewrite git history, I am writing a new answer based on <a href=\"https://help.github.com/articles/changing-author-info/\">this post</a> which is similar to <a href=\"https://stackoverflow.com/a/3404304/391161\">this answer</a> but is more complete.</p>\n<p>The following is tested and working, unlike the linked answer.\nAssume for clarity of exposition that <code>03f482d6</code> is the commit whose author we are trying to replace, and <code>42627abe</code> is the commit with the new author. </p>\n<ol>\n<li>\n<p>Checkout the commit we are trying to modify. </p>\n<pre><code>git checkout 03f482d6\n</code></pre>\n</li>\n<li>\n<p>Make the author change.</p>\n<pre><code>  git commit --amend --author \"New Author Name &#x3C;New Author Email>\"\n</code></pre>\n<p>Now we have a new commit with hash assumed to be <code>42627abe</code>.</p>\n</li>\n<li>\n<p>Checkout the original branch.</p>\n</li>\n<li>\n<p>Replace the old commit with the new one locally.</p>\n<pre><code>git replace 03f482d6 42627abe\n</code></pre>\n</li>\n<li>\n<p>Rewrite all future commits based on the replacement.</p>\n<pre><code>git filter-branch -- --all\n</code></pre>\n</li>\n<li>\n<p>Remove the replacement for cleanliness.</p>\n<pre><code>git replace -d 03f482d6\n</code></pre>\n</li>\n<li>\n<p>Push the new history (only use --force if the below fails, and only after sanity checking with <code>git log</code> and/or <code>git diff</code>).</p>\n<pre><code>git push --force-with-lease\n</code></pre>\n</li>\n</ol>\n<p>Instead of 4-5 you can just rebase onto new commit:</p>\n<pre><code>git rebase -i 42627abe\n</code></pre>","noteIndex":{"id":"ACmIaoniWX1pK5upZqwF4","title":"Infrastructure","desc":"","updated":1644158025787,"created":1641149787317,"custom":{"nav_order":0,"permalink":"/"},"fname":"infrastructure","type":"note","vault":{"fsPath":"vault"},"contentHash":"62480da9abef0bc86d140688f95f22c5","links":[],"anchors":{"entrypoint":{"type":"header","text":"Entrypoint","value":"entrypoint","line":10,"column":0,"depth":2},"bootstrap":{"type":"header","text":"Bootstrap","value":"bootstrap","line":18,"column":0,"depth":2},"hardening":{"type":"header","text":"Hardening","value":"hardening","line":27,"column":0,"depth":2}},"children":["8NrarbQZt3SzDSH5WW0o5","5ka687wljzl5f8huxwvyl6v"],"parent":null,"data":{},"body":"\nThis is the root of my infrastructure documentation.\n\n## Entrypoint\n\nTo manage my infrastructure, I have an [Ansible collection](https://github.com/jonsible/iac) that holds several roles and playbooks.\n\nI also have an [inventory repository](https://github.com/jonsible/inventory) which is private, that holds :\n- Bare machines, meaning bare-metal hosts and virtual machines that I pay for\n- VMs, meaning virtual machines that I provisioned in my KVM infrastructure.\n\n## Bootstrap\n\nUsually, the first role to run when creating a new server is the [bootstrap role](https://github.com/jonsible/iac/tree/master/roles/bootstrap).\n\n- It creates the default user (configured by the `default_user` variable)\n- Installs a public key in the user's `authorized_keys` by retrieving it from `github` (configured by the `github_user` variable)\n- Sets up passwordless sudo\n- Installs required components\n\n## Hardening\n\nThe [hardening role](https://github.com/jonsible/iac/tree/master/roles/hardening) will perform multiple steps to secure the server.\n\n- Remove `ufw`\n- Install iptables\n- Install and configure `fail2ban`\n- "},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"yyyy.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableHandlebarTemplates":false,"enableFullHierarchyNoteTitle":false,"dendronVersion":"0.97.0","templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["infrastructure","git","keyboards","environments","python","projects"],"theme":"dark","enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://docs.bbrain.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Docs","description":"Personal knowledge space"},"github":{"cname":"docs.bbrain.io","enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"infrastructure"}}},"__N_SSG":true}